#include "lab assistant.h"#include "mainMachineList.h"#include "database.h"#include <stdlib.h>#include <stdio.h>#include <string.h>/*******************************************************************		int compare(const void *n1, const void *n2)--------------------------------------------------------------------SYNOPSIS: Call back routine for the qsort routine.CALLED BY: PASS: const void *n1     	 : button pressed	  const void *n2         : where it was pressedRETURN: int				 	 : see qsort documentationREVISION HISTORY:	Name				Date		Description	----				----		-----------	Jeremy C Norberg	9/01/93		Initial version*********************************************************************/int compareIt(const void *n1, const void *n2){	computerRecord s1,s2;		/* transfer n1 and n2 to a computerRecord */		memcpy(&s1, n1, sizeof(s1));	memcpy(&s2, n2, sizeof(s2));		/* if computer s1 is not in use, set priority and time on to 0 */		if(!BitTst(&s1.status, kComputerInUse))	{		s1.userInfo.priority = 0;		s1.timeOn = 0;	}		/* if computer s1 is not in use, set priority and time on to 0 */		if(!BitTst(&s2.status, kComputerInUse))	{		s2.userInfo.priority = 0;		s2.timeOn = 0;	}		/* see which s1 or s2 has the highest priority */		if(s1.userInfo.priority > s2.userInfo.priority)		return -1;	if(s1.userInfo.priority < s2.userInfo.priority)		return 1;	else		/* if the same priority see which one has lower timeOn */		{			if(s1.timeOn > s2.timeOn)			return 1;		else if(s1.timeOn < s2.timeOn)			return -1;		else			return 0;	}}/*******************************************************************		void MakeList(void)--------------------------------------------------------------------SYNOPSIS: This routine creates the list box in the main window.CALLED BY: PASS: nothing.RETURN: nothing.REVISION HISTORY:	Name				Date		Description	----				----		-----------	Jeremy C Norberg	9/01/93		Initial version*********************************************************************/void MakeList(void){	computerRecord 			sortedList[100];	computerRecPtr			theComputer;	ListHandle				theList;	short 					computerNumber, sortComputerNumber = 1, counter;	Str255					s;	Cell					theCell;	long					numberofMachines;	Str255					timeOn, converter;		theList = GetListHandle();			//SetPt(&theCell, 0, 0);	//LGetSelect(true, &theCell, theList);	//LSetSelect(0, theCell, theList);		LDoDraw(false, theList);       /* turn list drawing off for speed increase */			numberofMachines = GetNumberofMachines();		LockMachineRecordHdl();	for(counter = 0; counter < numberofMachines; counter ++) /* make a copy of the gComputerRecord to sort */	{		theComputer = GetMachineRecord(counter);		memcpy(&sortedList[counter], theComputer, sizeof(computerRecord));	}	UnLockMachineRecordHdl();		/* sort the list */		qsort(sortedList, numberofMachines, sizeof(sortedList[0]), compareIt);		/* Add the status indicators for the machine list and add them to the list */		TextFont(kDefaultTextFont);	TextSize(kDefaultTextSize);	TextMode(kDefaultTextMode);		for(computerNumber = 0; computerNumber < numberofMachines; computerNumber++)	{								IUTimeString(sortedList[computerNumber].timeOn, 0, timeOn);		PtoCstr(timeOn);				if (!BitTst(&sortedList[computerNumber].status, kComputerInUse))		{			if (!BitTst(&sortedList[computerNumber].status, kComputerWorking))			{				sprintf((char *) s,"%.3d    Machine Down", sortedList[computerNumber].number);			}			else if (BitTst(&sortedList[computerNumber].status, kTeachingSet))			{				sprintf((char *) s,"%.3d    Used for Class", sortedList[computerNumber].number);			}			else			{				sprintf((char *) s,"%.3d    Machine Free", sortedList[computerNumber].number);			}		}		else if(BitTst(&sortedList[computerNumber].userInfo.status, UserTypeBit))		{			strncpy((char *) converter, sortedList[computerNumber].userInfo.name, 30);						sprintf((char *) s,"%.3d    %.10s    %d    %s", sortedList[computerNumber].number,										 		converter,										 		sortedList[computerNumber].userInfo.priority,										 		timeOn);					}		else		{				NumToString(sortedList[computerNumber].userInfo.studentNumber, converter);			PtoCstr(converter);						sprintf((char *) s,"%.3d    %.10s    %d    %s", sortedList[computerNumber].number,										 		converter,										 		sortedList[computerNumber].userInfo.priority,										 		timeOn);		}		                        		SetPt(&theCell, 0, computerNumber);		//LSetSelect(0, theCell, theList);		LSetCell(s, strlen((char *) s), theCell, theList);	}		LDoDraw(true, theList);	HLock((Handle) theList);	LUpdate((*theList)->port->visRgn, theList);	HUnlock((Handle) theList);}