#include "lab assistant.h"#include "database.h"#include "user.h"#include "machineDown.h"#include "checkOut.h"#include "machine.h"#include "error.h"#include "interface.h"#include "loginEmployee.h"void HandleMachineDown(short computerNumber){	dialogRecordHdl		dialogRecord;	computerRecPtr		theComputer;	extern	char		gFeatureFlag;		if ( ( !BitTst(&gFeatureFlag, 3L) ) && ( !BitTst(&gFeatureFlag, 4L) ) )	{		NewAlert("\pAn Employee Must Be Logged In First!", false, ok, 2);		LoginEmployee();	}		dialogRecord = (dialogRecordHdl) NewHandle(sizeof(dialogRec));		if(computerNumber != -99)	{			if(computerNumber != -99)	{			LockMachineRecordHdl();		theComputer = GetMachineRecord(computerNumber);				if(!BitTst(&theComputer->status, kComputerWorking))		{			 DoError("\pThe computer is already marked down.");			 return;		}		computerNumber = (*theComputer).number;		UnLockMachineRecordHdl();	}	}		HLock((Handle) dialogRecord);	(*dialogRecord)->theEvent = kEventMachineDown;	(*dialogRecord)->callBack = MachineDownCallBack;	(*dialogRecord)->theRecord = computerNumber;	HUnlock((Handle) dialogRecord);		if(computerNumber == -99)		MachineEnterBoxSetup(dialogRecord);	else		MachineDownCallBack(dialogRecord);}	void MachineDownCallBack(dialogRecordHdl dialogRecord){	long 			machineArrayNumber;	computerRecPtr	theComputer;	short 			itemHit;		HLock((Handle) dialogRecord);	itemHit = (*dialogRecord)->itemHit;		if(itemHit == cancel)	{		HUnlock((Handle) dialogRecord);		DisposeHandle((Handle) dialogRecord);		return;	}		if(!FindMachineNumber((*dialogRecord)->theRecord, &machineArrayNumber))	{		NewAlert("\pThe number you typed was not found.", false, ok, 2);		// Alert that is wrong number entered and to reenter number		HUnlock((Handle) dialogRecord);		DisposeHandle((Handle) dialogRecord);		HandleMachineDown();	}	else	{		HUnlock((Handle) dialogRecord);		LockMachineRecordHdl();		theComputer = GetMachineRecord(machineArrayNumber);				HLock((Handle) dialogRecord);		(*dialogRecord)->theRecord = machineArrayNumber;		HUnlock((Handle) dialogRecord);				if(!BitTst(&theComputer->status, kComputerWorking))		{			NewAlert("\pMachine already down.", false, ok, 2);			DisposeHandle((Handle) dialogRecord);			//handle already marked down		}		else if(BitTst(&theComputer->status, kComputerInUse))           // Is computer being used?		{						SysBeep(0);			if(NewAlert("\pSome one is using. Check them out?.", true, ok, 2) == ok)			{			// Alert user that some one is using machine and ask if they want to check them out							HLock((Handle) dialogRecord);				(*dialogRecord)->theEvent = kEventCheckOut;				(*dialogRecord)->theRecord = machineArrayNumber;				(*dialogRecord)->callBack = MarkMachineDown;				HUnlock((Handle) dialogRecord);								UserInfoBoxSetup(dialogRecord);			}		}		else			MarkMachineDown(dialogRecord);	}		UnLockMachineRecordHdl();	}void MarkMachineDown(dialogRecordHdl dialogRecord){	computerRecPtr		theComputer;	long				machineArrayNumber;	Byte				theEvent;	short				itemHit;		LockMachineRecordHdl();	HLock((Handle) dialogRecord);	theEvent = (*dialogRecord)->theEvent;	machineArrayNumber = (*dialogRecord)->theRecord;	itemHit = (*dialogRecord)->itemHit;		theComputer = GetMachineRecord(machineArrayNumber);		if((itemHit == ok) && (theEvent == kEventCheckOut))		BitClr(&theComputer->status, kComputerInUse);		BitClr(&theComputer->status, kComputerWorking);		UpdateMachines(theComputer);		HUnlock((Handle) dialogRecord);	UnLockMachineRecordHdl();	DisposeHandle((Handle) dialogRecord);}