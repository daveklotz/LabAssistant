#include "lab assistant.h"#include "computerIcons.h"#include "database.h"#include "interface.h"#include "roomStatus.h"#include <icons.h>selectedIconPtr  gSelectedIcons;extern CIconHandle			gMachineWorkingIcon, gMachineDownIcon, gMachineTeachingIcon, gMachineInUseIcon;void DrawMachineIcon(computerRecPtr theComputer){	short		computerStatus, transform = ttNone;		computerStatus = ComputerStatus(theComputer->status);		if(BitTst(&(theComputer->status), kSelected))		transform = ttSelected;			switch(computerStatus)	{		case kComputerWorking:			PlotCIconHandle(&theComputer->computerRect, atNone, transform, gMachineWorkingIcon);			break;		case kComputerNotWorking:			PlotCIconHandle(&theComputer->computerRect, atNone, transform, gMachineDownIcon);			break;		case kComputerInUse:			PlotCIconHandle(&theComputer->computerRect, atNone, transform, gMachineInUseIcon);			break;	}		NumberIcon(theComputer->number, &theComputer->computerRect);		if(BitTst(&theComputer->status, kTeachingSet))		DrawTeaching(&theComputer->computerRect);		}void NumberIcon(short computerNumber, Rect *destRect){	Str255			stringComputerNumber;	RGBColor		theColor, oldColor;		GetForeColor(&oldColor);		NumToString((long) computerNumber, stringComputerNumber);		TextFont(9840);	TextSize(9);	TextMode(patOr);		theColor.red = 0;	theColor.green = 0;	theColor.blue = 0;		RGBForeColor(&theColor);		MoveTo( destRect->left + 4, destRect->top + 11);	DrawString(stringComputerNumber);		TextFont(kDefaultTextFont);	TextSize(kDefaultTextSize);	TextMode(kDefaultTextMode);		RGBForeColor(&oldColor);}void DrawTeaching(Rect *destRect){	RGBColor		theColor, oldColor;		GetForeColor(&oldColor);		TextFont(9840);	TextSize(12);	TextMode(patOr);		theColor.red = 0;	theColor.green = 0;	theColor.blue = 65535;		RGBForeColor(&theColor);		MoveTo( destRect->left + 4, destRect->top + 25);	DrawString("\pT");		TextFont(kDefaultTextFont);	TextSize(kDefaultTextSize);	TextMode(kDefaultTextMode);		RGBForeColor(&oldColor);}Boolean PointInComputer(Point pointWhere, short *computerNumber){	long				numberofComputers, counter;	computerRecPtr		theComputer;	Boolean				returnValue = false;		numberofComputers = GetNumberofMachines();		LockMachineRecordHdl();	for(counter = 0; counter < numberofComputers; counter ++)	{			theComputer = GetMachineRecord(counter);		if(PtInRect(pointWhere, &theComputer->computerRect))		{			returnValue = true;			*computerNumber = counter;			break;		}	}	UnLockMachineRecordHdl();	return returnValue;}void CreateSelectedIconRec(void){	gSelectedIcons = (selectedIconPtr) NewPtr(sizeof(selectedIconRec));		gSelectedIcons->next = (selectedIconPtr) NewPtr(sizeof(selectedIconRec));	gSelectedIcons->next->next = gSelectedIcons->next;}Boolean IsSelected(short machineArrayNumber){	selectedIconPtr header, pointer;	Boolean 		returnValue = false;		header = gSelectedIcons;		pointer = header->next;		while(pointer->next != pointer)	{		returnValue = (pointer->machineArrayNumber == machineArrayNumber);				pointer = pointer->next;	}		return returnValue;}void AddSelectedIcon(short machineArrayNumber){	selectedIconPtr		header, newMachine;		header = gSelectedIcons;		newMachine = (selectedIconPtr) NewPtr(sizeof(selectedIconRec));		newMachine->machineArrayNumber = machineArrayNumber;		newMachine->next = header->next;	header->next = newMachine;}short RemoveSelectedIcon(void){	selectedIconPtr		header, removed;	short				machineArrayNumber;		header = gSelectedIcons;		machineArrayNumber = header->next->machineArrayNumber;		removed = header->next;		if(removed->next == removed)		return -1;		header->next = removed->next;		DisposePtr((Ptr) removed);		return machineArrayNumber;}void SelectIcon(short machineArrayNumber){	computerRecPtr		theComputer;		LockMachineRecordHdl();	theComputer = GetMachineRecord(machineArrayNumber);		if(!BitTst(&theComputer->status, kSelected))	{		AddSelectedIcon(machineArrayNumber);			BitSet(&theComputer->status, kSelected);			DrawMachineIcon(theComputer);	}		UnLockMachineRecordHdl();}void DeselectIcons(void){	computerRecPtr		theComputer;	short 				machineArrayNumber;		while((machineArrayNumber = RemoveSelectedIcon()) != -1)	{		LockMachineRecordHdl();		theComputer = GetMachineRecord(machineArrayNumber);		BitClr(&theComputer->status, kSelected);				DrawMachineIcon(theComputer);	}		UnLockMachineRecordHdl();}