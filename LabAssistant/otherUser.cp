#include <string.h>#include "lab assistant.h"#include "database.h"#include "otherUser.h"#include "dialogEvents.h"#include "interface.h"#include "menu.h"#include "error.h"#include "listUser.h"void EditUserBoxSetup(dialogRecordHdl dialogRecord){	GrafPtr			oldPort;	DialogPtr		theDialog;	winRefConRecHdl	refCon;	short			itemType;	Handle			itemHandle;	Rect			itemRect;	Str255			itemText;	userNodePtr		theUser;	Byte			dialogEvent;	Boolean			status, restriction;		GetPort(&oldPort);		theDialog = GetNewDialog(kEditUserBoxID, nil, (WindowPtr)-1L);		SetPort(theDialog);		refCon = (winRefConRecHdl) NewHandle(sizeof(winRefConRec));        // Create Ptr to refCon record		HLock((Handle) refCon);	(*refCon)->windowID = kEditUserBoxID;                          // Assign the WindowID	(*refCon)->oldPort = (long) oldPort;                           // Assign the misc field to the oldPort. This required when closeing dialog box	(*refCon)->dialogRecord = dialogRecord;	HUnlock((Handle) refCon);		HLock((Handle) dialogRecord);	theUser = (userNodePtr) (*dialogRecord)->theRecord;	dialogEvent = (*dialogRecord)->theEvent;	HUnlock((Handle) dialogRecord);		SetWRefCon(theDialog, (long) refCon);                          // Set the WindowRefCon			switch(dialogEvent)	{		case kEventEditUser:			SetWTitle(theDialog, "\pEdit User");			break;		case kEventAddUser:			SetWTitle(theDialog, "\pAdd User");			break;	}		GetDItem(theDialog, 4, &itemType, &itemHandle, &itemRect);	NumToString(theUser->studentNumber, itemText);	SetIText(itemHandle, itemText);	InsetRect(&itemRect, -4, -4);	Add3dRaised(&itemRect, true, true, false);		GetDItem(theDialog, 5, &itemType, &itemHandle, &itemRect);	memcpy(itemText, theUser->name, sizeof(theUser->name));	CtoPstr((char *) itemText);	SetIText(itemHandle, itemText);	InsetRect(&itemRect, -4, -4);	Add3dRaised(&itemRect, true, true, false);		status = (theUser->gender) == 'M';	GetDItem(theDialog, 8, &itemType, &itemHandle, &itemRect);	SetCtlValue((ControlHandle) itemHandle, status);	GetDItem(theDialog, 9, &itemType, &itemHandle, &itemRect);	SetCtlValue((ControlHandle)itemHandle, !status);		status = BitTst(&(theUser->status), UserTypeBit);	GetDItem(theDialog, 6, &itemType, &itemHandle, &itemRect);	SetCtlValue((ControlHandle)itemHandle, status);	GetDItem(theDialog, 7, &itemType, &itemHandle, &itemRect);	SetCtlValue((ControlHandle)itemHandle, !status);		status = BitTst(&(theUser->status), RestrictedUserBit);	restriction = BitTst(&(theUser->status), LevelOfRestrictionBit);		GetDItem(theDialog, 13, &itemType, &itemHandle, &itemRect);	SetCtlValue((ControlHandle)itemHandle, !status);	GetDItem(theDialog, 14, &itemType, &itemHandle, &itemRect);	SetCtlValue((ControlHandle)itemHandle, status && !restriction);	GetDItem(theDialog, 15, &itemType, &itemHandle, &itemRect);	SetCtlValue((ControlHandle)itemHandle, status && restriction);		GetDItem(theDialog, 10, &itemType, &itemHandle, &itemRect);	SetCtlValue((ControlHandle)itemHandle, theUser->priority == 1);	GetDItem(theDialog, 11, &itemType, &itemHandle, &itemRect);	SetCtlValue((ControlHandle)itemHandle, theUser->priority == 2);	GetDItem(theDialog, 12, &itemType, &itemHandle, &itemRect);	SetCtlValue((ControlHandle)itemHandle, theUser->priority == 3);		GetDItem(theDialog, 22, &itemType, &itemHandle, &itemRect);	SetDItem(theDialog, 22, itemType, (Handle) DrawOKOutline, &itemRect);			ShowWindow(theDialog);}void EditUserBoxEvent(EventRecord *theEvent){	WindowPtr			theDialog, oldPort;	winRefConRecHdl		refCon;	Handle				okButtonHandle, itemHandle;	short				itemType, itemHit = 0, counter;	Rect				itemRect;   	Str255				itemString;	char				theKey;	Boolean				done = false;	dialogRecordHdl		dialogRecord;	dialogProcPtr		callBack;	Boolean				okStatus = true;	userNodePtr			theUser;	theDialog = FrontWindow();		refCon = (winRefConRecHdl) GetWRefCon(theDialog);        // Get the Window Ref Record from the Windows Ref Con	HLock((Handle) refCon);	oldPort = (WindowPtr) (*refCon)->oldPort;	dialogRecord = (dialogRecordHdl) (*refCon)->dialogRecord;	HUnlock((Handle) refCon);		HLock((Handle) dialogRecord);	callBack = (*dialogRecord)->callBack;	theUser = (userNodePtr) (*dialogRecord)->theRecord;	HUnlock((Handle) dialogRecord);		GetDItem(theDialog, ok, &itemType, &okButtonHandle, &itemRect);		for(counter = 4;counter <= 5; counter ++)	{		GetDItem(theDialog, counter, &itemType, &itemHandle, &itemRect);		GetIText(itemHandle, itemString);		if(itemString[0] == 0)		{			okStatus = false;			break;		}	}		if(!okStatus)		HiliteControl((ControlHandle) okButtonHandle, 255);	else		HiliteControl((ControlHandle) okButtonHandle, 0);			switch(theEvent->what)          							 // Handle Keys before passing off to Dialog Select	{		case keyDown:		case autoKey:			theKey = theEvent->message & charCodeMask;       			 // Mask out the char from the event message						if(theEvent->modifiers & cmdKey)			{								done = HandleCommandKeys(theKey, theDialog);			}			else			{				switch (theKey)				{					case '\r':			// Return					case '\003':		// Enter						itemHit = ok;						done = true;						break;					case '\010':		// BackSpace						break;					case '\033':		// ESC						itemHit = cancel;						done = true;						break;					case '\034':		// Left arrow					case '\035':		// Right arrow						break;					default:			// Everything else falls through to be dealt with						break;				}			}		}	if(!done)	{			if(!DialogSelect(theEvent, (DialogPtr *) &theDialog, &itemHit))			return;                // Nothing to Handle, just return.	}                                	for(counter = 4;counter <= 5; counter ++)	{		GetDItem(theDialog, counter, &itemType, &itemHandle, &itemRect);		GetIText(itemHandle, itemString);		if(itemString[0] == 0)		{			okStatus = false;			break;		}	}		if(!okStatus)		HiliteControl((ControlHandle) okButtonHandle, 255);	else		HiliteControl((ControlHandle) okButtonHandle, 0);			switch (itemHit)	{		case ok:			if(!okStatus)			{					break;			}						GetDItem(theDialog, 4, &itemType, &itemHandle, &itemRect);			GetIText(itemHandle, itemString);			StringToNum(itemString, &theUser->studentNumber);						GetDItem(theDialog, 5, &itemType, &itemHandle, &itemRect);			GetIText(itemHandle, itemString);			PtoCString(itemString);			memcpy(theUser->name, itemString, sizeof(theUser->name));			itemString[30] = '\0';			//itemString[0] = 30;			//PtoCstr(itemString);			//memcpy(theUser->name, itemString, sizeof(theUser->name));						GetDItem(theDialog, 6, &itemType, &itemHandle, &itemRect);			GetCtlValue((ControlHandle) itemHandle) == 1 ?				BitClr(&theUser->status, UserTypeBit) :				BitSet(&theUser->status, UserTypeBit);							GetDItem(theDialog, 8, &itemType, &itemHandle, &itemRect);			if(GetCtlValue((ControlHandle) itemHandle))				(*theUser).gender = 'M';			else				(*theUser).gender = 'F';						GetDItem(theDialog, 13, &itemType, &itemHandle, &itemRect);			GetCtlValue((ControlHandle) itemHandle) == 1 ?				BitClr(&theUser->status, RestrictedUserBit) :				BitSet(&theUser->status, RestrictedUserBit);						GetDItem(theDialog, 14, &itemType, &itemHandle, &itemRect);			GetCtlValue((ControlHandle) itemHandle) == 1 ?				BitClr(&theUser->status, LevelOfRestrictionBit) :				BitSet(&theUser->status, LevelOfRestrictionBit);							GetDItem(theDialog, 10, &itemType, &itemHandle, &itemRect);			if(GetCtlValue((ControlHandle) itemHandle))				theUser->priority = 1;			else			{				GetDItem(theDialog, 11, &itemType, &itemHandle, &itemRect);				if(GetCtlValue((ControlHandle) itemHandle))					theUser->priority = 2;				else					theUser->priority = 3;			}			HLock((Handle) dialogRecord);		case cancel:			(*dialogRecord)->itemHit = itemHit;			HUnlock((Handle) dialogRecord);			DisposeDialog(theDialog);			DisposeHandle((Handle) refCon);			SetPort(oldPort);						DisableMenus(false);						callBack(dialogRecord);			break;				case 6:		case 7:			GetDItem(theDialog, 6, &itemType, &itemHandle, &itemRect);			SetCtlValue((ControlHandle)itemHandle, itemHit == 6);			GetDItem(theDialog, 7, &itemType, &itemHandle, &itemRect);			SetCtlValue((ControlHandle)itemHandle, itemHit == 7);			break;				case 8:		case 9:			GetDItem(theDialog, 8, &itemType, &itemHandle, &itemRect);			SetCtlValue((ControlHandle)itemHandle, itemHit == 8);			GetDItem(theDialog, 9, &itemType, &itemHandle, &itemRect);			SetCtlValue((ControlHandle)itemHandle, itemHit == 9);			break;				case 10:		case 11:		case 12:			GetDItem(theDialog, 10, &itemType, &itemHandle, &itemRect);			SetCtlValue((ControlHandle)itemHandle, itemHit == 10);			GetDItem(theDialog, 11, &itemType, &itemHandle, &itemRect);			SetCtlValue((ControlHandle)itemHandle, itemHit == 11);			GetDItem(theDialog, 12, &itemType, &itemHandle, &itemRect);			SetCtlValue((ControlHandle)itemHandle, itemHit == 12);			break;				case 13:		case 14:		case 15:			GetDItem(theDialog, 13, &itemType, &itemHandle, &itemRect);			SetCtlValue((ControlHandle)itemHandle, itemHit == 13);			GetDItem(theDialog, 14, &itemType, &itemHandle, &itemRect);			SetCtlValue((ControlHandle)itemHandle, itemHit == 14);			GetDItem(theDialog, 15, &itemType, &itemHandle, &itemRect);			SetCtlValue((ControlHandle)itemHandle, itemHit == 15);			break;	}}//void LoginOtherUser(userNode &theUser, dialogRecordHdl &dialogRecord)//{//	NewAlert("\pWooooo!!!", false, ok, 2);	//EditUserBoxEvent(theEvent);//	EditUserInfo();//}	