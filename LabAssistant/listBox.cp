#include <string.h>#include <stdio.h>#include "lab assistant.h"#include "listBox.h"#include "interface.h"#include "userRecord.h"#include "Menu.h"void ListBoxSetup(dialogRecordHdl dialogRecord){	GrafPtr			oldPort;	DialogPtr		theDialog;	winRefConRecHdl	refCon;	short			itemType;	Handle			itemHandle;	Rect			itemRect;	ListHandle		theList;	Rect 			listSize;	Point			cellSize, theCell;	userNode		*userRecordList;	employeeNode	*employeeRecordList;	Byte			theEvent;		char			name[31];	short			row = 0;	RGBColor		backColor;		DisableMenus(true);		GetPort(&oldPort);		theDialog = GetNewDialog(kListBoxID, nil, (WindowPtr)-1L);		SetPort(theDialog);		backColor.red = 65535;	backColor.green = 65535;	backColor.blue = 65535;		RGBBackColor(&backColor);		ShowWindow(theDialog);		GetDItem(theDialog, 3, &itemType, &itemHandle, &itemRect);	SetRect(&listSize,0,0,1,0);	SetPt(&cellSize,0,0);		theList = LNew(&itemRect, &listSize, cellSize, 0, theDialog, true, false, false, true);		itemRect.right += 15;	InsetRect(&itemRect, -2, -2);		Add3dRaised(&itemRect, true, true, true);		refCon = (winRefConRecHdl) NewHandle(sizeof(winRefConRec));        // Create Ptr to refCon record		HLock((Handle) refCon);	(*refCon)->windowID = kListBoxID;                          // Assign the WindowID	(*refCon)->dialogRecord = dialogRecord;	(*refCon)->oldPort = (long) oldPort; 							// Assign the misc field to the oldPort. This required when closeing dialog box	(*refCon)->list = (long) theList;                              	HUnlock((Handle) refCon);		HLock((Handle) dialogRecord);		if((theEvent = (*dialogRecord)->theEvent) == kEventUserList)		userRecordList = (userNode *) (*dialogRecord)->theRecord;	else		employeeRecordList = (employeeNode *) (*dialogRecord)->theRecord;			HUnlock((Handle) dialogRecord);		(*theList)->selFlags = 190;		if(theEvent == kEventUserList)	{		userRecordList = userRecordList->next;				while(userRecordList != userRecordList->next)		{			LAddRow(1, row, theList);			sprintf(name, "%s", userRecordList->name);							SetPt(&theCell, 0, row);			LSetCell(name, strlen(name), theCell, theList);						row ++;						userRecordList = userRecordList->next;		}	}	else	{		employeeRecordList = employeeRecordList->next;				while(employeeRecordList != employeeRecordList->next)		{			LAddRow(1, row, theList);									sprintf(name, "%s", employeeRecordList->name);			//PtoCString((Str255)&name);			//memcpy(employeeRecordList->name, name, sizeof(employeeRecordList->name));			//name[30] = '\0';							SetPt(&theCell, 0, row);			LSetCell(name, strlen(name), theCell, theList);						row ++;						employeeRecordList = employeeRecordList->next;		}	}		LDoDraw(true, theList);		SetPt(&theCell, 0, 0);	LSetSelect(true, theCell, theList);		SetWRefCon(theDialog, (long) refCon);                          // Set the WindowRefCon		GetDItem(theDialog, ok, &itemType, &itemHandle, &itemRect);	HiliteControl((ControlHandle) itemHandle, 255);		GetDItem(theDialog, 4, &itemType, &itemHandle, &itemRect);	SetDItem(theDialog, 4, itemType, (Handle) DrawOKOutline, &itemRect);		LUpdate((*theList)->port->visRgn, theList);	}void ListBoxBoxEvent(EventRecord *theEvent){	WindowPtr			theDialog, oldPort;	winRefConRecHdl		refCon;	Handle				okButtonHandle;	short				itemType, itemHit = 0;	Rect				itemRect;   	char				theKey;	Boolean				done = false, cellSelected;	dialogRecordHdl		dialogRecord;	dialogProcPtr		callBack;	Point				clickLocation, theCell;	ListHandle			theList;		userNode			*theUserList;				short				len;	char 				searchName[31];	long 				oldMisc;	theDialog = FrontWindow();		refCon = (winRefConRecHdl) GetWRefCon(theDialog);        // Get the Window Ref Record from the Windows Ref Con	HLock((Handle) refCon);	oldPort = (WindowPtr) (*refCon)->oldPort;	dialogRecord = (dialogRecordHdl) (*refCon)->dialogRecord;	theList = (ListHandle) (*refCon)->list;	HUnlock((Handle) refCon);		HLock((Handle) dialogRecord);	callBack = (*dialogRecord)->callBack;	HUnlock((Handle) dialogRecord);		GetDItem(theDialog, ok, &itemType, &okButtonHandle, &itemRect);		SetPt(&theCell, 0, 0);	if(cellSelected = LGetSelect(true, &theCell, theList))		HiliteControl((ControlHandle) okButtonHandle, 0);	else		HiliteControl((ControlHandle) okButtonHandle, 255);		switch(theEvent->what)          							 //Handle Keys before passing off to Dialog Select	{		case mouseDown:			memcpy(&clickLocation, &theEvent->where, sizeof(Point));			GlobalToLocal(&clickLocation);			LClick(clickLocation, theEvent->modifiers, theList);			break;		case updateEvt:			LUpdate((*theList)->port->visRgn, theList);			break;		case keyDown:		case autoKey:			theKey = theEvent->message & charCodeMask;       			 // Mask out the char from the event message			switch (theKey)			{				case '\r':			// Return				case '\003':		// Enter					itemHit = ok;					done = true;					break;				case '\033':		// ESC					itemHit = cancel;					done = true;					break;			}		}	if(!done)	{			if(!DialogSelect(theEvent, (DialogPtr *) &theDialog, &itemHit))			return;                // Nothing to Handle, just return.	}                                		SetPt(&theCell, 0, 0);		cellSelected = LGetSelect(true, &theCell, theList);		switch (itemHit)	{		case ok:			if(!cellSelected)				break;								if((*dialogRecord)->theEvent == kEventEmployeeList)			{				HLock((Handle)dialogRecord);				(*dialogRecord)->misc = (long) theCell.v;				(*dialogRecord)->itemHit = itemHit;			}			else			{						HLock((Handle) dialogRecord);			oldMisc = (*dialogRecord)->misc;			(*dialogRecord)->misc = (long) theCell.v;			(*dialogRecord)->itemHit = itemHit;						len = sizeof(searchName);						LGetCell(searchName, &len, theCell, theList);						searchName[len] = '\0';						theUserList = CreateUserList();			ReadUserInfo(theUserList);						GetOtherUserID(searchName, dialogRecord, theUserList);			(*dialogRecord)->misc = oldMisc;						}								case cancel:								(*dialogRecord)->itemHit = itemHit;				HUnlock((Handle) dialogRecord);			//move up to case ok and repeat?						DisposeDialog(theDialog);			DisposeHandle((Handle) refCon);			SetPort(oldPort);									callBack(dialogRecord);			break;	}	DisableMenus(false);}