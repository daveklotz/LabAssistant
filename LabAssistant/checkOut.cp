#include "lab assistant.h"#include "database.h"#include "user.h"#include "checkOut.h"#include "machine.h"#include "error.h"#include "interface.h"#include "menu.h"#include "Norm_Files.h"#include "waitList.h"#include "loginEmployee.h"void HandleCheckOut(short computerNumber){	dialogRecordHdl		dialogRecord;	computerRecPtr		theComputer;	extern	char		gFeatureFlag;		if ( ( !BitTst(&gFeatureFlag, 3L) ) && ( !BitTst(&gFeatureFlag, 4L) ) )	{		NewAlert("\pAn Employee Must Be Logged In First!", false, ok, 2);		LoginEmployee();		return;	}		dialogRecord = (dialogRecordHdl) NewHandle(sizeof(dialogRec));		if(computerNumber != -99)	{			LockMachineRecordHdl();		theComputer = GetMachineRecord(computerNumber);				if(!BitTst(&theComputer->status, kComputerWorking))		{			DoError("\pThe computer is marked down.");			//DisposeHandle((Handle)dialogRecord);			return;		}		else if(!BitTst(&theComputer->status, kComputerInUse))		{			 DoError("\pThe computer is not being used.");			 //DisposeHandle((Handle)dialogRecord);			 return;		}		computerNumber = (*theComputer).number;		UnLockMachineRecordHdl();	}			HLock((Handle) dialogRecord);	(*dialogRecord)->theEvent = kEventCheckOut;	(*dialogRecord)->callBack = CheckOutCallBack;	(*dialogRecord)->theRecord = computerNumber;	HUnlock((Handle) dialogRecord);		if(computerNumber == -99)		MachineEnterBoxSetup(dialogRecord);	else		CheckOutCallBack(dialogRecord);}void CheckOutCallBack(dialogRecordHdl dialogRecord){	long 			machineArrayNumber;	computerRecPtr	theComputer;	short			itemHit;	extern Boolean	gLocDone;		HLock((Handle) dialogRecord);	itemHit = (*dialogRecord)->itemHit;		if(itemHit == cancel)	{		HUnlock((Handle) dialogRecord);		DisposeHandle((Handle) dialogRecord);		return;	}		if(!FindMachineNumber((*dialogRecord)->theRecord, &machineArrayNumber))	{		NewAlert("\pThe number you typed was not found.", false, ok, 2);		// Alert that is wrong number entered and to reenter number		HUnlock((Handle) dialogRecord);		DisposeHandle((Handle) dialogRecord);		HandleCheckOut();	}	else	{		LockMachineRecordHdl();		theComputer = GetMachineRecord(machineArrayNumber);				if(!BitTst(&theComputer->status, kComputerInUse))		{			NewAlert("\pNo one using that machine.", false, ok, 2);			// Handle no one using machine			HUnlock((Handle) dialogRecord);			DisposeHandle((Handle) dialogRecord);			return;		}				(*dialogRecord)->theRecord = machineArrayNumber;		(*dialogRecord)->theEvent = kEventCheckOut;		(*dialogRecord)->callBack = CheckOutUser;				HUnlock((Handle) dialogRecord);				UserInfoBoxSetup(dialogRecord);	}}void CheckOutUser(dialogRecordHdl dialogRecord){	computerRecPtr		theComputer;	long				machineArrayNumber;	short				itemHit;	extern Boolean 		gLocDone;		HLock((Handle) dialogRecord);	itemHit = (*dialogRecord)->itemHit;	machineArrayNumber = (*dialogRecord)->theRecord;	HUnlock((Handle) dialogRecord);		if(itemHit == ok)	{		LockMachineRecordHdl();		theComputer = GetMachineRecord(machineArrayNumber);				BitClr(&theComputer->status, kComputerInUse);			UpdateMachines(theComputer);		UnLockMachineRecordHdl();			//WaitList		theWaitingList;		//if (theWaitingList.IsThereAWaitList())		//	theWaitingList.CheckInFromWaitList();	}		DisposeHandle((Handle) dialogRecord);	WriteUsageLog(theComputer);	gLocDone = true;	if (itemHit == ok)	{		WaitList		theWaitingList;		if (theWaitingList.IsThereAWaitList())			theWaitingList.CheckInFromWaitList();	}}