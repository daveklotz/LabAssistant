#include "lab assistant.h"#include "machine.h"#include "user.h"#include "otherUser.h"#include "dialogEvents.h"#include "employee.h"#include "listBox.h"#include "editListBox.h"#include "dialog.h"#include "createDatabase.h"#include "bumpUser.h"#include "loginEmployee.h"#include "waitList.h"short DoDialogEvent(EventRecord *theEvent){	WindowPtr			theDialog;	winRefConRecHdl		refCon;	unsigned char		windowID;	theDialog = FrontWindow();		refCon = (winRefConRecHdl) GetWRefCon(theDialog);        // Get the Window Ref Record from the Windows Ref Con	HLock((Handle) refCon);	windowID = (*refCon)->windowID;	HUnlock((Handle) refCon);			switch (windowID)                             // Process the correct events for the dialog that is being used.	{		case kMachineEnterBoxID:			MachineEnterBoxEvent(theEvent);			break;		case kUserEnterBoxID:			UserEnterBoxEvent(theEvent);			break;		case kEditUserBoxID:			EditUserBoxEvent(theEvent);			break;		case kEditEmployeeBoxID:			EditEmployeeBoxEvent(theEvent);			break;		case kListBoxID:			ListBoxBoxEvent(theEvent);			break;		case kUserInfoBoxID:			UserInfoBoxEvent(theEvent);			break;		case kBumpUserBoxID:			BumpUserBoxEvent(theEvent);			break;		case kCreateTempUserBoxID:			SysBeep(8);			break;		case kAboutBoxID:			SysBeep(8);			break;		case kDatabaseSetupBoxID:			DatabaseSetupBoxEvent(theEvent);;			break;		case kSupervisorOptionBoxID:			SysBeep(8);			break;		case kEditListBoxID:			EditListBoxBoxEvent(theEvent);			break;		case kEnterPasswordBoxID:			PasswordBoxEvent(theEvent);			break;		case 137:			WaitList	theWaitingList;			theWaitingList.WaitlistBoxEvent(theEvent);			break;	}	return 0;}pascal void DrawOKOutline(WindowPtr theDialog, short theItem){	Rect	itemRect;	Handle	itemHandle;	short	itemType;		GetDItem(theDialog, ok, &itemType, &itemHandle, &itemRect);	PenSize(3,3);	InsetRect(&itemRect, -4, -4);	FrameRoundRect(&itemRect, 16,16);		theItem = 0;}Boolean HandleCommandKeys(char theKey, DialogPtr theDialog){	Boolean		returnValue = false;		switch (theKey)	{		case 'C':		case 'c':			DlgCopy((DialogPtr) theDialog);			returnValue = true;			break;				case 'X':		case 'x':			DlgCut((DialogPtr) theDialog);			returnValue = true;			break;				case 'V':		case 'v':			DlgPaste((DialogPtr) theDialog);			returnValue = true;			break;	}			return returnValue;}dialogRecordHdl CreateDialogRec(dialogProcPtr callBack, Byte theEvent,	long theRecord, short itemHit, long misc){	dialogRecordHdl		dialogRecord;		dialogRecord = (dialogRecordHdl) NewHandle(sizeof(dialogRec));		HLock((Handle) dialogRecord);	(*dialogRecord)->callBack = callBack;	(*dialogRecord)->theEvent = theEvent;	(*dialogRecord)->theRecord = theRecord;	(*dialogRecord)->itemHit = itemHit;	(*dialogRecord)->misc = misc;	HUnlock((Handle) dialogRecord);	return dialogRecord;}