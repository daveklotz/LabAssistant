#include "error.h"#include "lab assistant.h"#include "checkOut.h"#include "database.h"#include "dialog.h"#include "transferUser.h"#include "roomStatus.h"#include <stdio.h>#include <string.h>/*******************************************************************		void DoTransfer(short fromComputer, short toComputer)--------------------------------------------------------------------SYNOPSIS: Transfers a user from one computer to another.CALLED BY: PASS: short fromComputer  : computer to transfer      short toComputer    : computer transfering toRETURN: nothing.REVISION HISTORY:	Name				Date		Description	----				----		-----------	Jeremy C Norberg	9/01/93		Initial version*********************************************************************/void DoTransfer(short fromComputer, short toComputer){	Str255 			tempString;	dialogRecordHdl	dialogRecord;	computerRecPtr	fromCompRec, toCompRec;	short			computerStatus;	long			theTime;		dialogRecord = CreateDialogRec(nil, nil, (long) fromComputer, ok, nil);		LockMachineRecordHdl();		fromCompRec = GetMachineRecord(fromComputer);	toCompRec = GetMachineRecord(toComputer);		if(!BitTst(&fromCompRec->status, kComputerInUse))	{		sprintf((char *) tempString, "Cannot transfer. Computer %d is not being used.", fromCompRec->number);				CtoPstr((char *) tempString);				DoError(tempString, false);		UnLockMachineRecordHdl();		return;	}		computerStatus = ComputerStatus(toCompRec->status);		if(BitTst(&toCompRec->status, kTeachingSet))		computerStatus = kTeachingSet;		if(computerStatus != kComputerWorking)	{		switch (computerStatus)		{			case kComputerInUse:				sprintf((char *) tempString, "Cannot transfer. Computer %d is already in use.",toCompRec->number);				break;			case kComputerNotWorking:				sprintf((char *) tempString, "Cannot transfer. Computer %d is marked not working.", toCompRec->number);				break;			case kTeachingSet:				sprintf((char *) tempString, "Cannot transfer. Computer %d is being used for a class.", toCompRec->number);				break;		}				CtoPstr((char *) tempString);				DoError(tempString, false);		UnLockMachineRecordHdl();		return;	}					sprintf((char *) tempString, "Transfer the user on computer %d to computer %d?", fromCompRec->number, toCompRec->number);			CtoPstr((char *) tempString);		if(NewAlert(tempString, true, ok) != 1)	{			UnLockMachineRecordHdl();		return;	}		memcpy(&toCompRec->userInfo, &fromCompRec->userInfo, sizeof(userNode));		BitSet(&toCompRec->status, kComputerInUse);		GetDateTime((unsigned long *) &theTime);		toCompRec->timeOn = theTime;		UpdateMachines(toCompRec);		UnLockMachineRecordHdl();		CheckOutUser(dialogRecord);}