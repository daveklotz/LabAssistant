#include "lab assistant.h"#include "loginEmployee.h"#include "employeeRecord.h"#include "employee.h"#include "listBox.h"#include "dialog.h"#include "string.h"#include "error.h"#include "Menu.h"#include "interface.h"extern employeeNode *gEmployeeLog;void LoginEmployee(void){	employeeNode		*employeeHead;	dialogRecordHdl		dialogRecord;		employeeHead = CreateEmployeeList();		CreateDefaultEmployee(employeeHead);		ReadEmployeeInfo(employeeHead);			dialogRecord = CreateDialogRec(PasswordBoxSetup, kEventEmployeeList, (long) employeeHead);	//DisableMenus(true);		ListBoxSetup(dialogRecord);}void LoginEmployeeoCallBack(dialogRecordHdl dialogRecord){	//short				theCell;	employeeNode		*theEmployee, *employeeHead;	short				counter, itemHit;	MenuHandle			theMenu;	Str255				name, itemString;	short 				menuCount;	DialogPtr			theDialog;	long				theID;		extern char 		gFeatureFlag;		theMenu = GetMenu(mEmployee);	HLock((Handle) dialogRecord);	theID = (*dialogRecord)->misc;	employeeHead = (employeeNode *) (*dialogRecord)->theRecord;	itemHit = (*dialogRecord)->itemHit;	HUnlock((Handle) dialogRecord);		if (itemHit == cancel)		return;			theEmployee = employeeHead;	do	{		theEmployee = theEmployee->next;	} 	while (theEmployee->studentNumber != (*dialogRecord)->misc);		menuCount = CountMItems(theMenu);	for(counter = 1; counter <= menuCount; counter++)	{		GetItem(theMenu, counter, itemString);		if(!(strcmp(theEmployee->name, PtoCString(itemString))))		//		strcmp(theEmployee->name, "Temporary Employee"))		{			itemHit = cancel;			strcat((char *)itemString, " is already logged in.");			CtoPString((char *)itemString); 			NewAlert(itemString, false, ok, 2);			theMenu = GetMenu(mSupervisor);			if(BitTst(&gFeatureFlag, 3L))			{				EnableItem(theMenu, 0);			}			else				DisableItem(theMenu, 0);			break;		}	}	theDialog = FrontWindow();		switch(itemHit)	{		case ok:			AddEmployeeRecord(gEmployeeLog, theEmployee);			strcpy((char *) name, theEmployee->name);			CtoPstr((char *) name);			AppendMenu(theMenu, name);			if(theEmployee->supervisor)				BitSet(&gFeatureFlag, 3L);   //supervisor bit			else				BitSet(&gFeatureFlag, 4L);			theMenu = GetMenu(mSupervisor);			if(BitTst(&gFeatureFlag, 3L))			{				EnableItem(theMenu, 0);			}			else				DisableItem(theMenu, 0);		case cancel:			DeleteEmployeeList(employeeHead);			break;	}		DisposeHandle((Handle) dialogRecord);	}void PasswordBoxSetup(dialogRecordHdl dialogRecord){		GrafPtr			oldPort;	DialogPtr		theDialog;	winRefConRecHdl	refCon;	short			itemType;	Handle			itemHandle;	Rect			itemRect;	RGBColor		theColor;	employeeNode	*theEmployee, *employeeHead;	short 			theCell;	short 			itemHit;	short 			counter;			DisableMenus(true);		HLock((Handle) dialogRecord);	theCell = (short) (*dialogRecord)->misc;	employeeHead = (employeeNode *) (*dialogRecord)->theRecord;	itemHit = (*dialogRecord)->itemHit;	HUnlock((Handle) dialogRecord);		if (itemHit == cancel)		return;	theEmployee = employeeHead->next;		for(counter = 0; counter != theCell; counter ++)		theEmployee = theEmployee->next;			HLock((Handle)dialogRecord);	(*dialogRecord)->misc = theEmployee->studentNumber;	(*dialogRecord)->callBack = LoginEmployeeoCallBack;	HUnlock((Handle)dialogRecord);			DisableMenus(true);	GetPort(&oldPort);		theDialog = GetNewDialog(kEnterPasswordBoxID, nil, (WindowPtr)-1L);	SetPort(theDialog);		refCon = (winRefConRecHdl) NewHandle(sizeof(winRefConRec)); 		HLock((Handle)refCon);	(*refCon)->windowID = kEnterPasswordBoxID;	(*refCon)->dialogRecord = dialogRecord;	(*refCon)->oldPort = (long)oldPort;	HUnlock((Handle)refCon);		SetWRefCon(theDialog, (long) refCon);		GetDItem(theDialog, ok, &itemType, &itemHandle, &itemRect);	HiliteControl((ControlHandle) itemHandle, 255);		GetDItem(theDialog, 7, &itemType, &itemHandle, &itemRect);	SetDItem(theDialog, 7, itemType, (Handle) DrawOKOutline, &itemRect);		ShowWindow(theDialog);		theColor.red = 65535;	theColor.green = 65535;	theColor.blue = 65535;			RGBBackColor(&theColor);		GetDItem(theDialog, 4, &itemType, &itemHandle, &itemRect);	InsetRect(&itemRect, -4, -4);	Add3dRaised(&itemRect, true, true, false);}void PasswordBoxEvent(EventRecord *theEvent){	WindowPtr			theDialog, oldPort;	winRefConRecHdl		refCon;	Handle				passwordHandle, okButtonHandle, cancelButtonHandle;	short				itemType, itemHit = 0;	Rect				itemRect;	char				theKey;	Boolean				done = false;	dialogProcPtr		callBack;	dialogRecordHdl		dialogRecord;	//Handle				itemHandle;	Str255				itemString;		employeeNode		*theEmployee;	short				stringLen;		theDialog = FrontWindow();		refCon = (winRefConRecHdl) GetWRefCon(theDialog);	HLock((Handle) refCon);	oldPort = (WindowPtr) (*refCon)->oldPort;	dialogRecord = (dialogRecordHdl) (*refCon)->dialogRecord;	HUnlock((Handle) refCon);		HLock((Handle)dialogRecord);	callBack = (*dialogRecord)->callBack;	HUnlock((Handle)dialogRecord);		GetDItem(theDialog, 3, &itemType, &passwordHandle, &itemRect);	GetDItem(theDialog,ok, &itemType, &okButtonHandle, &itemRect);	GetDItem(theDialog, 2, &itemType, &cancelButtonHandle, &itemRect);		HiliteControl((ControlHandle) okButtonHandle, 0);		switch(theEvent->what)	{		case keyDown:		case autoKey:			theKey = theEvent->message;						if(theEvent->modifiers & cmdKey)			{								done = HandleCommandKeys(theKey, theDialog);			}			else			{				switch(theKey)				{					case '\r':			// Return					case '\003':		// Enter						itemHit = ok;						done = true;						break;					case '\010':		// BackSpace						break;					case '\033':		// ESC						itemHit = cancel;						done = true;						break;					case '\034':		// Left arrow					case '\035':		// Right arrow						break;					default:			// Everything else falls through to be dealt with						GetIText(passwordHandle, itemString);							stringLen = (char) itemString[0];																		if((stringLen > 18) )						{								SysBeep(0); // If it is too long, beep							return;						}																break;				}			}	}		if(!done)	{			if(!DialogSelect(theEvent, (DialogPtr *) &theDialog, &itemHit))			return;                // Nothing to Handle, just return.	}                                		GetIText(passwordHandle, itemString);					switch(itemHit)	{		case ok:			HLock((Handle)dialogRecord);			theEmployee = (employeeNode *)(*dialogRecord)->theRecord;			do			{				theEmployee = theEmployee->next;			} 			while (theEmployee->studentNumber != (*dialogRecord)->misc);						PtoCString(itemString);			if (strcmp((char *)itemString, theEmployee->password))			{				NewAlert("\pThe password you typed is incorrect",false, ok, 2);				itemHit = cancel;			}			else 			{				itemHit = ok;			}			HUnlock((Handle)dialogRecord);		case cancel:			HLock((Handle)dialogRecord);			(*dialogRecord)->itemHit = itemHit;			HUnlock((Handle) dialogRecord);			DisposeDialog(theDialog);			DisposeHandle((Handle) refCon);			SetPort(oldPort);			DisableMenus(false);						callBack(dialogRecord);   //LogInEmployeeCallBack			break;							}	DisableMenus(false);}		