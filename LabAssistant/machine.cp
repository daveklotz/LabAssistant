#include "lab assistant.h"#include "machine.h"#include "user.h"#include "database.h"#include <string.h>void MachineEnterBoxSetup(dialogRecordHdl dialogRecord){	GrafPtr			oldPort;	DialogPtr		theDialog;	StringHandle	theMessage, windowTitle;	winRefConRecHdl	refCon;	short			itemType;	Handle			itemHandle;	Rect			itemRect;	Byte			theEvent;		GetPort(&oldPort);		theDialog = GetNewDialog(kMachineEnterBoxID, nil, (WindowPtr)-1L);		SetPort(theDialog);		refCon = (winRefConRecHdl) NewHandle(sizeof(winRefConRec));        // Create Handle to refCon record		HLock((Handle) refCon);	(*refCon)->windowID = kMachineEnterBoxID;                          // Assign the WindowID	(*refCon)->oldPort = (long) oldPort;                                 // Assign the misc field to the oldPort. This required when closeing dialog box	(*refCon)->dialogRecord = dialogRecord;	HUnlock((Handle) refCon);		HLock((Handle) dialogRecord);	theEvent = (*dialogRecord)->theEvent;	HUnlock((Handle) dialogRecord);		SetWRefCon(theDialog, (long) refCon);                          // Set the WindowRefCon			switch (theEvent)             // Set theMessage to appropriate for event	{		case kEventMachineUp:			windowTitle = NewString("\pMark Machine Working");			theMessage = NewString("\pPlease remember to remove the NOT WORKING sign from the machine.\rEnter the machine number to mark working.");			break;		case kEventMachineDown:			windowTitle = NewString("\pMark Machine Down");			theMessage = NewString("\pIMPORTANT: Please place a NOT WORKING sign on the machine and email engrlab@engr.washington.edu an explaination of the problem.\r\rEnter the machine number to mark down.");			break;		case kEventCheckOut:			windowTitle = NewString("\pCheck Out User");			theMessage = NewString("\pEnter the machine number to check the user out of.");			break;	}		HLock((Handle) theMessage);	ParamText(*theMessage, kEmptyString, kEmptyString, kEmptyString);// Set the Paramater Text to theMessage	HUnlock((Handle) theMessage);	DisposHandle((Handle) theMessage);		HLock((Handle) windowTitle);	SetWTitle(theDialog, *windowTitle);	HUnlock((Handle) windowTitle);	DisposHandle((Handle) windowTitle);		GetDItem(theDialog, ok, &itemType, &itemHandle, &itemRect);	HiliteControl((ControlHandle) itemHandle, 255);		GetDItem(theDialog, 7, &itemType, &itemHandle, &itemRect);	SetDItem(theDialog, 7, itemType, (Handle) DrawOKOutline, &itemRect);		ShowWindow(theDialog);}void MachineEnterBoxEvent(EventRecord *theEvent){	WindowPtr			theDialog, oldPort;	winRefConRecHdl		refCon;	Handle				machineNumberBoxHandle, okButtonHandle;	short				itemType, itemHit = 0;	Rect				itemRect;	Str255				itemString;	char				theKey;	Byte				stringLen;	Boolean				done = false;	long				machineNumber;	dialogRecordHdl		dialogRecord;	dialogProcPtr		callBack;	theDialog = FrontWindow();	refCon = (winRefConRecHdl) GetWRefCon(theDialog);        // Get the Window Ref Record from the Windows Ref Con	HLock((Handle) refCon);	oldPort = (WindowPtr) (*refCon)->oldPort;	dialogRecord = (*refCon)->dialogRecord;	HUnlock((Handle) refCon);			GetDItem(theDialog, 3, &itemType, &machineNumberBoxHandle, &itemRect);	GetDItem(theDialog, ok, &itemType, &okButtonHandle, &itemRect);			switch(theEvent->what)          							 //Handle Keys before passing off to Dialog Select	{		case keyDown:		case autoKey:			theKey = theEvent->message & charCodeMask;       			 // Mask out the char from the event message						if(theEvent->modifiers & cmdKey)			{								done = HandleCommandKeys(theKey, theDialog);			}			else			{				switch (theKey)				{					case '\r':			// Return					case '\003':		// Enter						itemHit = ok;						done = true;						break;					case '\010':		// BackSpace						break;					case '\033':		// ESC						itemHit = cancel;						done = true;						break;					case '\034':		// Left arrow					case '\035':		// Right arrow						break;					default:			// Everything else falls through to be dealt with						if(theKey < '0' || theKey > '9')						{							SysBeep(8);         // If it is not a number, beep!							return;						}						break;				}			}		}	if(!done)	{			if(!DialogSelect(theEvent, (DialogPtr *) &theDialog, &itemHit))			return;                // Nothing to Handle, just return.	}                                	GetIText(machineNumberBoxHandle, itemString);		stringLen = (char) itemString[0];		if(stringLen > 0)		HiliteControl((ControlHandle) okButtonHandle, 0);	else		HiliteControl((ControlHandle) okButtonHandle, 255);		switch (itemHit)	{		case ok:			if(stringLen < 1)			{					break;			}			StringToNum(itemString, &machineNumber);						HLock((Handle) dialogRecord);			(*dialogRecord)->theRecord = machineNumber;		case cancel:			callBack = (*dialogRecord)->callBack;			(*dialogRecord)->itemHit = itemHit;			HUnlock((Handle) dialogRecord);			DisposeDialog(theDialog);			DisposeHandle((Handle) refCon);			SetPort(oldPort);						callBack(dialogRecord);			break;	}}