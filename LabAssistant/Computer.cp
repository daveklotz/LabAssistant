#include "Norm.h"#include "Computer.h"#include "User.h"#include "Norm_Dialogs.h"#include "Interface.h"#include "Norm_Files.h"extern computerRecord	gComputerRecord[100];extern short			gNumberofComputers;extern consultant		gConsultantsOnDuty[5], gTheConsultant;extern short			gCurrentConsultantMenuItem;extern Boolean			gConsultantFlag, gSupervisorFlag;extern consultant		gTheSupervisor, gActiveEmployee;extern CIconHandle		gComputerIconHandle, gComputerDownIconHandle, gUserIconHandle;/*******************************************************************		Boolean CheckforComputer(Point pointWhere, short *computerNumber)--------------------------------------------------------------------SYNOPSIS: Check if mouse was clicked on a computer icon.CALLED BY: PASS: Point pointWhere          : point of click      short *computerNumber     : computer clicked on if clicked onRETURN: Boolean                 : computer clicked on?REVISION HISTORY:	Name				Date		Description	----				----		-----------	Jeremy C Norberg	9/01/93		Initial version*********************************************************************/	Boolean CheckforComputer(Point pointWhere, short *computerNumber){	short		counter;		for(counter = 0;counter < gNumberofComputers; counter ++)	{		if(PtInIconID(pointWhere, &gComputerRecord[counter].computerRect, 					  atNone, kComputerIcon))		{			*computerNumber = counter;			return true;		}	}		return false;}void MarkMachineDown(short computerNumber, Boolean dragged){	DialogPtr		markComputerDownDialog;	WindowPtr		oldPort;	short			dialogItemHit;	Boolean			dialogDone = false, foundIt = false;	Str255			itemText, tempString;	short			itemType;	Handle			itemHandle;	Rect			itemRect;	CIconHandle		iconHandle;		short			counter, computerNumberRecord;	long			theComputerNumber;			if(!dragged)	{			GetPort(&oldPort);				markComputerDownDialog = GetNewDialog(dMarkComputerDown, nil, (WindowPtr)-1L);				ParamText("\pIMPORTANT: Please place a NOT WORKING sign on computer and send email to engrlab@engr.washington.edu explaining problem.", kEmptyString, kEmptyString, kEmptyString);			SetPort(markComputerDownDialog);		SetWTitle(markComputerDownDialog, "\pMark Computer Down");		ShowWindow(markComputerDownDialog);				iconHandle = GetCIcon(kComputerDownIcon);				GetDItem(markComputerDownDialog, 6, &itemType, &itemHandle, &itemRect);		SetDItem(markComputerDownDialog, 6, itemType, (Handle) iconHandle, &itemRect);		DisposCIcon((CIconHandle) itemHandle);				SetDialogDefaultItem(markComputerDownDialog, ok);		SetDialogCancelItem(markComputerDownDialog, cancel);		SetDialogTracksCursor(markComputerDownDialog, true);				while (!dialogDone)		{			ModalDialog(TheDialogFilter, &dialogItemHit);						switch (dialogItemHit)			{				case ok:					dialogDone = true;					break;				case cancel:					DisposeDialog(markComputerDownDialog);										SetPort(oldPort);					return;					break;			}		}				GetDItem(markComputerDownDialog, 3, &itemType, &itemHandle, &itemRect);		GetIText(itemHandle, itemText);		StringToNum(itemText, &theComputerNumber);		computerNumber = (short) theComputerNumber;				DisposeDialog(markComputerDownDialog);				SetPort(oldPort);				for(counter = 0; counter < gNumberofComputers; counter ++)              /* Search for computer number matched with entered computer number */		{			if(gComputerRecord[counter].number == (short) computerNumber)			{				computerNumberRecord = counter;				foundIt = true;				break;			}		}	}	else	{		computerNumberRecord = computerNumber;				sprintf((char *) tempString, "Are you sure you want to mark computer %d down? Doing so will check out the user that is currently using it.", gComputerRecord[computerNumber].number);				CtoPstr((char *) tempString);			if(NormAlert(tempString, true, ok, kAlertIcon) == cancel)			return;				foundIt = true;	}		if (!foundIt)	{		DoError("\pThe machine number you entered is not valid. Please re-enter a valid computer number.", false);		return;	}		if(BitTst(&gComputerRecord[computerNumberRecord].computerInfo.status, kComputerInUse))           /* Is computer in use? */	{		if(!DoCheckOut(computerNumberRecord, false))   /* If yes, check out user on computer */		{			DoError("\pThe Computer was Not marked down.", false);				return;		}													 	}	else if (!BitTst(&gComputerRecord[computerNumberRecord].computerInfo.status, kComputerWorking))  /* Is computer already marked down? */	{		DoError("\pThe computer is already marked down.", false);		return;	}		BitClr(&gComputerRecord[computerNumberRecord].computerInfo.status, kComputerWorking);            /* Set computer status to down */		SelectIcon(computerNumberRecord, false);														 /* Unselect the icon */		ComputerRecordSave();											 /* Save the computer record info to disk */		DrawStatusBox();		MakeList();																    }void MarkMachineUp(short computerNumber, Boolean dragged){	DialogPtr	markComputerDownDialog;	WindowPtr	oldPort;	short		dialogItemHit;	Boolean		dialogDone = false, foundIt = false;	Str255		itemText, tempString;	short		itemType;	Handle		itemHandle;	Rect		itemRect;	Handle		iconHandle;		short		counter, computerNumberRecord;	char		computerStatus;	long		theComputerNumber;			if(!dragged)	{		GetPort(&oldPort);				markComputerDownDialog = GetNewDialog(dMarkComputerDown, nil, (WindowPtr)-1L);		ParamText("\pRemember to remove NOT WORKING sign from computer.", kEmptyString, kEmptyString, kEmptyString);				SetPort(markComputerDownDialog);		SetWTitle(markComputerDownDialog, "\pMark Computer Up");		ShowWindow(markComputerDownDialog);				iconHandle = (Handle) GetCIcon(kComputerIcon);				GetDItem(markComputerDownDialog, 6, &itemType, &itemHandle, &itemRect);		SetDItem(markComputerDownDialog, 6, itemType, iconHandle, &itemRect);		DisposCIcon((CIconHandle) itemHandle);				SetDialogDefaultItem(markComputerDownDialog, ok);		SetDialogCancelItem(markComputerDownDialog, cancel);		SetDialogTracksCursor(markComputerDownDialog, true);				while (!dialogDone)		{			ModalDialog(TheDialogFilter, &dialogItemHit);						switch (dialogItemHit)			{				case ok:					dialogDone = true;					break;				case cancel:					DisposeDialog(markComputerDownDialog);					SetPort(oldPort);					return;					break;			}		}				GetDItem(markComputerDownDialog, 3, &itemType, &itemHandle, &itemRect);		GetIText(itemHandle, itemText);		StringToNum(itemText, &theComputerNumber);		computerNumber = (short) theComputerNumber;				DisposeDialog(markComputerDownDialog);		SetPort(oldPort);				for(counter = 0; counter < gNumberofComputers; counter ++)		{			if(gComputerRecord[counter].number == (short) computerNumber)			{				computerNumberRecord = counter;				foundIt = true;				break;			}		}	}	else	{		computerNumberRecord = computerNumber;				sprintf((char *) tempString, "Are you sure you want to mark computer %d up?", gComputerRecord[computerNumber].number);				CtoPstr((char *) tempString);			if(!NormAlert(tempString, true, ok, kAlertIcon))			return;				foundIt = true;	}		if (!foundIt)	{		DoError("\pThe machine number you entered is not valid. Please re-enter a valid computer number.", false);		return;	}		computerStatus = gComputerRecord[computerNumberRecord].computerInfo.status;		if(BitTst(&computerStatus, kComputerWorking))	{		DoError("\pComputer is not marked down.", false);		return;	}		BitSet(&gComputerRecord[computerNumberRecord].computerInfo.status, kComputerWorking);		SelectIcon(computerNumberRecord, false);		ComputerRecordSave();		DrawStatusBox();		MakeList();	}