#include <string.h>#include "lab assistant.h"#include "database.h"#include "otherUser.h"#include "dialogEvents.h"#include "employee.h"void EditEmployeeBoxSetup(dialogRecordHdl dialogRecord){	GrafPtr			oldPort;	DialogPtr		theDialog;	winRefConRecHdl	refCon;	short			itemType;	Handle			itemHandle;	Rect			itemRect;	Str255			itemText;	employeeNode	*theEmployee;	Byte			dialogEvent;		GetPort(&oldPort);		theDialog = GetNewDialog(kEditEmployeeBoxID, nil, (WindowPtr)-1L);		SetPort(theDialog);		refCon = (winRefConRecHdl) NewHandle(sizeof(winRefConRec));        // Create Ptr to refCon record		HLock((Handle) refCon);	(*refCon)->windowID = kEditEmployeeBoxID;                          // Assign the WindowID	(*refCon)->oldPort = (long) oldPort;                           // Assign the misc field to the oldPort. This required when closeing dialog box	(*refCon)->dialogRecord = dialogRecord;	HUnlock((Handle) refCon);		HLock((Handle) dialogRecord);	theEmployee = (employeeNode *) (*dialogRecord)->theRecord;	dialogEvent = (*dialogRecord)->theEvent;	HUnlock((Handle) dialogRecord);		SetWRefCon(theDialog, (long) refCon);                          // Set the WindowRefCon			switch(dialogEvent)	{		case kEventEditEmployee:			SetWTitle(theDialog, "\pEdit Employee");			break;		case kEventAddEmployee:			SetWTitle(theDialog, "\pAdd Employee");			break;	}		GetDItem(theDialog, 3, &itemType, &itemHandle, &itemRect);	memcpy(itemText, theEmployee->name, sizeof(theEmployee->name));	CtoPstr((char *) itemText);		SetIText(itemHandle, itemText);		GetDItem(theDialog, 4, &itemType, &itemHandle, &itemRect);	NumToString(theEmployee->studentNumber, itemText);	SetIText(itemHandle, itemText);		GetDItem(theDialog, 5, &itemType, &itemHandle, &itemRect);	memcpy(itemText, theEmployee->email, sizeof(theEmployee->email));	CtoPstr((char *) itemText);		SetIText(itemHandle, itemText);		GetDItem(theDialog, 6, &itemType, &itemHandle, &itemRect);	memcpy(itemText, theEmployee->password, sizeof(theEmployee->password));	CtoPstr((char *) itemText);		SetIText(itemHandle, itemText);		GetDItem(theDialog, 7, &itemType, &itemHandle, &itemRect);	SetCtlValue((ControlHandle) itemHandle,!theEmployee->supervisor);		GetDItem(theDialog, 8, &itemType, &itemHandle, &itemRect);	SetCtlValue((ControlHandle) itemHandle,theEmployee->supervisor);		GetDItem(theDialog, 14, &itemType, &itemHandle, &itemRect);	SetDItem(theDialog, 14, itemType, (Handle) DrawOKOutline, &itemRect);		ShowWindow(theDialog);}void EditEmployeeBoxEvent(EventRecord *theEvent){	WindowPtr			theDialog, oldPort;	winRefConRecHdl		refCon;	Handle				okButtonHandle, itemHandle;	short				itemType, itemHit = 0;	Rect				itemRect;   	Str255				itemString;	char				theKey;	Boolean				done = false;	short				counter;	dialogRecordHdl		dialogRecord;	dialogProcPtr		callBack;	Boolean				okStatus = true;	employeeNode		*theEmployee;	theDialog = FrontWindow();		refCon = (winRefConRecHdl) GetWRefCon(theDialog);        // Get the Window Ref Record from the Windows Ref Con	HLock((Handle) refCon);	oldPort = (WindowPtr) (*refCon)->oldPort;	dialogRecord = (dialogRecordHdl) (*refCon)->dialogRecord;	HUnlock((Handle) refCon);		HLock((Handle) dialogRecord);	callBack = (*dialogRecord)->callBack;	theEmployee = (employeeNode *) (*dialogRecord)->theRecord;	HUnlock((Handle) dialogRecord);		GetDItem(theDialog, ok, &itemType, &okButtonHandle, &itemRect);		for(counter = 3;counter <= 6; counter ++)	{		GetDItem(theDialog, counter, &itemType, &itemHandle, &itemRect);		GetIText(itemHandle, itemString);		if(itemString[0] == 0)		{			okStatus = false;			break;		}	}		if(!okStatus)		HiliteControl((ControlHandle) okButtonHandle, 255);	else		HiliteControl((ControlHandle) okButtonHandle, 0);		switch(theEvent->what)          							 // Handle Keys before passing off to Dialog Select	{		case keyDown:		case autoKey:			theKey = theEvent->message & charCodeMask;       			 // Mask out the char from the event message						if(theEvent->modifiers & cmdKey)			{								done = HandleCommandKeys(theKey, theDialog);			}			else			{				switch (theKey)				{					case '\r':			// Return					case '\003':		// Enter						itemHit = ok;						done = true;						break;					case '\010':		// BackSpace						break;					case '\033':		// ESC						itemHit = cancel;						done = true;						break;					case '\034':		// Left arrow					case '\035':		// Right arrow						break;					default:			// Everything else falls through to be dealt with						break;				}			}		}	if(!done)	{			if(!DialogSelect(theEvent, (DialogPtr *) &theDialog, &itemHit))			return;                // Nothing to Handle, just return.	}                                	okStatus = true;		for(counter = 3;counter <= 6; counter ++)	{		GetDItem(theDialog, counter, &itemType, &itemHandle, &itemRect);		GetIText(itemHandle, itemString);		if(itemString[0] == 0)		{			okStatus = false;			break;		}	}		if(!okStatus)		HiliteControl((ControlHandle) okButtonHandle, 255);	else		HiliteControl((ControlHandle) okButtonHandle, 0);			switch (itemHit)	{		case ok:			if(!okStatus)			{					break;			}						GetDItem(theDialog, 4, &itemType, &itemHandle, &itemRect);			GetIText(itemHandle, itemString);			StringToNum(itemString, &theEmployee->studentNumber);						GetDItem(theDialog, 3, &itemType, &itemHandle, &itemRect);			GetIText(itemHandle, itemString);			PtoCstr(itemString);			memcpy(theEmployee->name, itemString, sizeof(theEmployee->name));			itemString[30] = '\0';			//itemString[0] = sizeof(theEmployee->name);			//PtoCstr(itemString);			//memcpy(theEmployee->name, itemString, sizeof(theEmployee->name));						GetDItem(theDialog, 5, &itemType, &itemHandle, &itemRect);			GetIText(itemHandle, itemString);			PtoCstr(itemString);			memcpy(theEmployee->email, itemString, sizeof(theEmployee->email));			itemString[49] = '\0';			//itemString[0] = sizeof(theEmployee->email);			//PtoCstr(itemString);			//memcpy(theEmployee->email, itemString, sizeof(theEmployee->email));						GetDItem(theDialog, 6, &itemType, &itemHandle, &itemRect);			GetIText(itemHandle, itemString);			PtoCstr(itemString);			memcpy(theEmployee->password, itemString, sizeof(theEmployee->password));			itemString[19] = '\0';			//itemString[0] = sizeof(theEmployee->password);			//PtoCstr(itemString);			//memcpy(theEmployee->password, itemString, sizeof(theEmployee->password));						GetDItem(theDialog, 8, &itemType, &itemHandle, &itemRect);			theEmployee->supervisor = (Boolean) GetCtlValue((ControlHandle) itemHandle);						HLock((Handle) dialogRecord);		case cancel:			(*dialogRecord)->itemHit = itemHit;			HUnlock((Handle) dialogRecord);			DisposeDialog(theDialog);			DisposeHandle((Handle) refCon);			SetPort(oldPort);						callBack(dialogRecord);			break;				case 7:		case 8:			GetDItem(theDialog, 7, &itemType, &itemHandle, &itemRect);			SetCtlValue((ControlHandle)itemHandle, itemHit == 7);			GetDItem(theDialog, 8, &itemType, &itemHandle, &itemRect);			SetCtlValue((ControlHandle)itemHandle, itemHit == 8);			break;	}}