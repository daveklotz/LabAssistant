#include "lab assistant.h"#include "toolBar.h"#include "checkIn.h"#include "checkOut.h"#include "machineDown.h"#include "machineUp.h"#include <icons.h>extern toolBarIcon			**gToolBarIconRec;void HandleToolBar(short buttonNumber, short computer){		switch(buttonNumber)	{		case 0:			if(computer == -99)			{				HandleCheckIn();			}			else				HandleCheckIn(computer);			break;		case 1:			if(computer == -99)			{				HandleCheckOut();			}			else				HandleCheckOut(computer);			break;		case 2:			if(computer == -99)			{				HandleMachineDown();			}			else				HandleMachineDown(computer);			break;		case 3:			if(computer == -99)			{				HandleMachineUp();			}			else				HandleMachineUp(computer);			break;	}}void DrawToolBar(WindowPtr theWindow){	short			counter, numberofIcons;	char extern		gFeatureFlag;		numberofIcons = GetHandleSize((Handle) gToolBarIconRec) / sizeof(toolBarIcon);		HLock((Handle) gToolBarIconRec);	//if(BitTst(&gFeatureFlag, 3L))		for(counter = 0; counter < numberofIcons; counter ++)		{				PlotCIconHandle(&(*gToolBarIconRec)[counter].location, atNone, ttNone, (*gToolBarIconRec)[counter].theIcon);		}	//else	//	for(counter = 0; counter < numberofIcons - 1; counter ++)	//	{		//		PlotCIconHandle(&(*gToolBarIconRec)[counter].location, atNone, ttNone, (*gToolBarIconRec)[counter].theIcon);	//	}		HUnlock((Handle) gToolBarIconRec);}Boolean PointInToolbar(Point pointWhere, short& button){	short		counter, numberofIcons;	Boolean		returnValue;		numberofIcons = GetHandleSize((Handle) gToolBarIconRec) / sizeof(toolBarIcon);		HLock((Handle) gToolBarIconRec);	for(counter = 0; counter < numberofIcons; counter ++)	{		returnValue = PtInRect(pointWhere, &(*gToolBarIconRec)[counter].location);		if(returnValue)		{			button = counter;			break;		}	}	HUnlock((Handle) gToolBarIconRec);		return returnValue;}