#include "Lab Assistant.h"#include "Norm_Files.h"#include "database.h"#include "Event.h"#include "computerIcons.h"#include "machineRecord.h"#include "employeeRecord.h"#define kRm332FirstComputer		202L// Define Global VarialblesBoolean gDone = false;CIconHandle			gMachineWorkingIcon, gMachineDownIcon, gMachineTeachingIcon, gMachineInUseIcon;char				gFeatureFlag; 			/*Keeps information about:												bit 0:database checking on/off												bit 1:teachin on/off												bit 2: Allow consultant to turn teaching on/off*/											//	bit 3: Sup checked in or not											//  bit 4: anybody checked in or not											//  bit 5: waiting list or notGrafPtr				gMainPort;				// the port of the Main WindowRect				kScreenBBox;computerRecHdl		gMachineRecords;ListHandle			gMainWindowList;toolBarIcon			**gToolBarIconRec;/*******************************************************************		void main(void)********************************************************************SYNOPSIS: This is the entry point for the application. It initilizes		  the program and enters the event loop.CALLED BY: System upon open of applicationPASS: Nothing	RETURN: NothingREVISION HISTORY:	Name				Date		Description	----				----		-----------	Jeremy C Norberg	9/01/93		Initial version*********************************************************************/void main(void){	ToolBoxInit();	MenuBarInit();	WindowInit();	ToolBarInit();	CreateSelectedIconRec();	CreateEmployeeLog();	StartupSetup();	//AppleEventInit();		EventLoop();}/*******************************************************************		void ToolBoxInit(void)********************************************************************SYNOPSIS: This initializes the Macintosh toolboxs, including the Window Manager,		  Menu Manager, TextEdit Manager, Dialog Manager, and Font Manager. For		  further information, refer to Inside Mac.CALLED BY: main()PASS: nothing	RETURN: nothingDESTROYED: nothingREVISION HISTORY:	Name				Date		Description	----				----		-----------	Jeremy C Norberg	9/01/93		Initial version*********************************************************************/void ToolBoxInit(void){		InitGraf(&qd.thePort);	InitFonts();	InitWindows();	InitMenus();	TEInit();	InitDialogs(0L);	InitCursor();	}/*------------------------------------------------------------------		void WindowInit(void)--------------------------------------------------------------------SYNOPSIS: This prepares the main window, including the initilization		  of the machine list boxCALLED BY: main()PASS: nothing	RETURN: nothingDESTROYED: nothingREVISION HISTORY:	Name				Date		Description	----				----		-----------	Jeremy C Norberg	9/01/93		Initial version	"					12/02/94	Rewritten to support windowRecord-------------------------------------------------------------------*/void WindowInit(void){	WindowPtr	    theWindow;	winRefConRecHdl	windowRefRecord;	RgnHandle		deskRegion;	RGBColor		backColor;		backColor.blue = 65535;	backColor.green = 65535;	backColor.red = 65535;		theWindow = GetNewCWindow(kBaseResID, nil, kMoveToFront);		if (!theWindow)   // If cannot allocate memory for window quit application	{		SysBeep(80);				ExitToShell();	}		windowRefRecord = (winRefConRecHdl) NewHandle(sizeof(winRefConRec));		MachineListInit(theWindow);	MachineRecordInit();		HLock((Handle) windowRefRecord);	(*windowRefRecord)->windowID = kMainWindow;			// Set window record ID	HUnlock((Handle) windowRefRecord);		SetWRefCon(theWindow, (long) windowRefRecord);		SetPort(theWindow);	RGBBackColor(&backColor);	GetPort(&gMainPort);	ShowWindow(theWindow);		deskRegion = GetGrayRgn();	HLock((Handle) deskRegion);	kScreenBBox.top = (*deskRegion)->rgnBBox.top;	kScreenBBox.bottom = (*deskRegion)->rgnBBox.bottom;	kScreenBBox.right = (*deskRegion)->rgnBBox.right;	kScreenBBox.left = (*deskRegion)->rgnBBox.left;	HUnlock((Handle) deskRegion);		SetDAFont(kDefaultTextFont);}/*------------------------------------------------------------------		void MachineListInit(WindowPtr theWindow, ListHandle *theList)--------------------------------------------------------------------SYNOPSIS: This prepares the machine list box in the main window.CALLED BY: WindowInit()PASS: Ptr to the main window, Ptr to the List Handle	RETURN: nothingDESTROYED: nothingREVISION HISTORY:	Name				Date		Description	----				----		-----------	Jeremy C Norberg	12/02/94		Initial version-------------------------------------------------------------------*/void MachineListInit(WindowPtr theWindow){	Rect			listDisplayRect;	Rect			listSize;	Point			cellSize;		SetRect(&listDisplayRect, 379, 261, 606, 421);			// Set location of list box 	SetRect(&listSize, 0, 0, 1, 75);       					// Create Empty List Spec 	SetPt(&cellSize, 0, 0);									// Use automatic cell size 		gMainWindowList = LNew(&listDisplayRect, &listSize, cellSize, 0, theWindow, true, false, false, true);	(*gMainWindowList)->selFlags = 190;					   		   // Set selection flags for list}/*------------------------------------------------------------------		void MenuBarInit(void)--------------------------------------------------------------------SYNOPSIS: This Inits the menu bar.CALLED BY: Main()PASS: nothing	RETURN: nothingDESTROYED: nothingREVISION HISTORY:	Name				Date		Description	----				----		-----------	Jeremy C Norberg	12/02/94		Initial version-------------------------------------------------------------------*/void MenuBarInit(void){	Handle			menuBar;	MenuHandle		menu;		menuBar = GetNewMBar(kBaseResID);	SetMenuBar(menuBar);		menu = GetMHandle(mApple);	AddResMenu(menu, 'DRVR');		DrawMenuBar();}	/*------------------------------------------------------------------		void MachineRecordInit(void)--------------------------------------------------------------------SYNOPSIS: Init the Machine record from the NORM rsrc.CALLED BY: WindowInit()PASS: nothing	RETURN: nothingDESTROYED: nothingREVISION HISTORY:	Name				Date		Description	----				----		-----------	Jeremy C Norberg	12/02/94		Initial version-------------------------------------------------------------------*/void MachineRecordInit(){	Handle			buffer;	short			counter, numberofComputers;		gMachineWorkingIcon = GetCIcon(kMachineWorkingIcon);	gMachineDownIcon = GetCIcon(kMachineDownIcon);	gMachineTeachingIcon = GetCIcon(kMachineTeachingIcon);	gMachineInUseIcon = GetCIcon(kMachineInUseIcon);		buffer = GetResource('NORM', 130);						   					// Get icon Rects from resource 'NORM'		HLock(buffer);		numberofComputers = *(short *) *buffer;                   					// set the number of computers			gMachineRecords = (computerRecHdl) NewHandle(sizeof(computerRecord) * numberofComputers);			for(counter = 0; counter < numberofComputers; counter++)	{		(*gMachineRecords)[counter].number = ((normRsrcRecord *) (*buffer+2))[counter].number;		(*gMachineRecords)[counter].computerRect = ((normRsrcRecord *) (*buffer+2))[counter].computerRect;				(*gMachineRecords)[counter].status = kDefaultStatus;		}		HUnlock((Handle) buffer);	ReleaseResource((Handle) buffer);		ComputerRecordRead();}void ToolBarInit(void){		short 	counter;		gToolBarIconRec = (toolBarIcon **) NewHandle(sizeof(toolBarIcon) * 4);		HLock((Handle) gToolBarIconRec);		(*gToolBarIconRec)[0].theIcon = GetCIcon(kCheckInIcon);	(*gToolBarIconRec)[1].theIcon = GetCIcon(kCheckOutIcon);	(*gToolBarIconRec)[2].theIcon = GetCIcon(kMarkDownIcon);	(*gToolBarIconRec)[3].theIcon = GetCIcon(kMarkUpIcon);		for(counter = 0; counter < 2; counter++)	{		SetRect(&(*gToolBarIconRec)[counter].location, 283, 22 + counter * 74, 347, 86 + counter * 74);	}		for(counter = 2; counter < 4; counter++)	{		SetRect(&(*gToolBarIconRec)[counter].location, 283, 24 + counter * 74, 347, 88 + counter * 74);	}		HUnlock((Handle) gToolBarIconRec);}/*******************************************************************		void StartupSetup(void)********************************************************************SYNOPSIS: Reads in stored computer info for each machine, reads and sets the          Teaching ON/OFF flag and Database Checking ON/OFF flag,          and set the appropriate menu status for these flags. Makes the list          of computers on the main window.CALLED BY: main()PASS: nothing	RETURN: nothingDESTROYED: nothingREVISION HISTORY:	Name				Date		Description	----				----		-----------	Jeremy C Norberg	9/01/93		Initial version*********************************************************************/void StartupSetup(void){	MenuHandle	theMenu;	computerRecPtr		theComputer;	long 				machineArrayNumber;	extern char			gFeatureFlag;		theMenu = GetMenu(mSupervisor);		ComputerRecordRead();	BitClr(&gFeatureFlag, 3L);	BitClr(&gFeatureFlag, 4L);	BitSet(&gFeatureFlag, kDatabaseChecking);	DisableItem(theMenu, 0);	theMenu = GetMenu(135);	EnableItem(theMenu, 0);		theMenu = GetMenu(mMachine);		LockMachineRecordHdl();	FindMachineNumber(kRm332FirstComputer, &machineArrayNumber);	theComputer = GetMachineRecord(machineArrayNumber);	if ( BitTst(&theComputer->status, kTeachingSet) )	{		SetItem(theMenu, iTeaching, "\pTurn Teaching Off");		BitSet(&gFeatureFlag, kTeachingFlag);	}	else if ( !BitTst(&theComputer->status, kTeachingSet) )	{		SetItem(theMenu, iTeaching, "\pTurn Teaching On");		BitClr(&gFeatureFlag, kTeachingFlag);	}	UnLockMachineRecordHdl();					//ComputerRecordRead();		//CheckItem(theMenu, iClass, BitTst(&gFeatureFlag, kTeachingSet));	//CheckItem(theMenu, iDatabaseChecking, BitTst(&gFeatureFlag, kDatabaseChecking));	//CheckItem(theMenu, iConsultantClassCheck, BitTst(&gFeatureFlag, kConsultantClassCheck));		//BitTst(&gFeatureFlag, kConsultantClassCheck) ? EnableItem(theMenu, iClass) : DisableItem(theMenu, iClass);		//MakeList();}